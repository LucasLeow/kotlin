========================================================================================================================
Structural vs Referential Equality
========================================================================================================================

    '==': (structural equality) in kotlin checks for structural equality
        - .equals() also structural equality in kotlin

    '===': (referential equality)
        - .equals() in java checks for referential equality

    '!=' : structural inequality
    '!==' : referential inequality


    fun main(args: Array<String>) {

        val employee1 = Employee("Mary", 1)
        val employee2 = Employee("John", 2)
        val employee3 = Employee("John", 2)

        println(employee1 == employee2) // false
        println(employee2 == employee3) // true
        println(employee2 === employee3) // false

        println(employee1.equals(employee2)) // false
        println(employee2.equals(employee3)) // true

        // in java, its false, false, false , true

    }


========================================================================================================================
Type Checking
========================================================================================================================

    - use 'is' instead of 'instanceof'
    - '!is' for its counter operation

    - smart casting : when type checking a variable, can treat the variable as being casted if true

    eg:

        val myPerson: Any = Employee("Lucas", 1)

        if (myPerson is Employee) {
            println("myPerson is an instance of Employee!")
        }

========================================================================================================================
Type Casting
========================================================================================================================

    - using 'as' keyword

    val string1: String = "This is string 1"
    val string2: String = string1 as String // this works just fine
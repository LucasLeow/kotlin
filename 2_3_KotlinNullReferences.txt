========================================================================================================================
Kotlin Null References
========================================================================================================================

    * Java has many if-checks to prevent NPE
    * Kotlin aims to make code more concise
    * Best practice in kotlin is to avoid declaring nullable types unless absolutely have to
        - val myNullable: Int? = bankBranch?.bankCode ?: 0 // default value is 0 if null

    eg:

        val countryCode: String? = bankBranch?.address?.country?.countryCode
            - instead of having 3 if checks
            - short circuits & returns null so long as null encountered

    val str: String? = null // must include '?' to indicate variable as nullable type
        - nullable types have a lot of restrictions on what can be done
        - need to perform null check then can perform standard non-nullable actions

========================================================================================================================
Kotlin Nullable vs Non-Nullable variables
========================================================================================================================

    - nullable specified with '?' after data type

    val nullableStr: String? = "This string is nullable"
    val nonNullableStr: String = "This string is not nullable"

    * Nullable & Non-nullable dtypes are distinct types

========================================================================================================================
Null Check Method 1: (using if block) - Not concise
========================================================================================================================

    * Adding '?' after dtype indicates that variable is Nullable

    val str: String? = "This is a nullable string"

    if (str != null) { // must perform null check on nullable type to perform standard actions
        println(str.toUpperCase())
    }

========================================================================================================================
Null Check Method 2: (Safe-call operator) - recommended way
========================================================================================================================

    * Adding '?' after dtype indicates that variable is Nullable

    val str: String? = "This is a nullable string"

    println(str?.toUpperCase())

========================================================================================================================
Elvis operator
========================================================================================================================

    - denoted by '?:'
    - looks like Elvis when tilted horizontally
    - provides default value instead of null when using safe access operator
    - if providing default value, then var will not be nullable type

    eg:


        val str2: String = bankBranch?.address ?: "This is default value if null"

========================================================================================================================
Safe Cast operator
========================================================================================================================

    - using 'as?' keyword
    - will evaluate to 'null' if type cast unsuccessful

    eg:

        val myIntArray: Int = arrayOf(1, 2, 3, 4)
        val str3 = myIntArray as? String
        println(str3) // evaluate as null

        // str3 will be considered a nullable
        - to perform any further actions, need to use safe access operator

        str3?.toUpperCase()

========================================================================================================================
Not-Null assertion
========================================================================================================================

    - used when absolutely sure that variable will not contain null
    - specified using '!!'
    * will throw kotlin.KotlinNPE if null really occurs (occur at line of assertion, not where null variable is used)
        - not recommended to chain '!!', else will not know which variable is causing NPE

    eg:

        val str: String? = "This variable is nullable"
        val str4 = str!!.toUpperCase() // not-null assertion so don't need ?. to call toUpperCase()

========================================================================================================================
'let' expression to handle Nullables
========================================================================================================================

        - function takes in non-nullable string
        - can pass nullable string to function using 'let' expression
        - 'let' requires a lambda expression within braces

    fun printText(text: String) {
        println(text)
    }

    val str: String? = "This is a nullable String"

    str?.let { printText(str) }
========================================================================================================================
Intro to Kotlin
========================================================================================================================

    - created by JetBrains
    - can compile to run on JVM + Javascript VM
    - in future, possible to compile kotlin to machine code (don't need JVM at all)

    - can write single Kotlin class & add to existing Java app
    - can write kotlin apps & run on JVM
    - named after an island in Russia because dev team resides there

    * runs anywhere JVM can run
    * statically typed (need to type declare variables) (i.e. compile time declaration)
    * object-oriented + functional programming (fn as first-class citizens)
    * kotlin is more concise than java

    * everything in Kotlin is a class (no dtype that are lower-case)

    * possible to call java functions / methods within kotlin files
        - kotlin primitives are converted to java primitives under the hood
        (altho kotlin only have classes as dtypes)

========================================================================================================================
4 Kotlin Guiding Principles
========================================================================================================================

    1. Conciseness
        - much less code needed to be written compared to Java
        - initially may write more verbose, but over time, may start to be more concise
        - write as concise as possible for kotlin (guideline)

    2. Safety
        - from null-pointer exceptions

    3. Pragmatic
        - designed to solve problem, not for research
        - more than 1 way to perform similar action

    4. Interoperability
        - interoperable with Java


========================================================================================================================
How Kotlin Compiles
========================================================================================================================

    - Kotlin files (.kt) -> Kotlin compiler -> bytecode (.class)
    - JVM can execute .class files, similar to java .class files
    - need Kotlin runtime library + JRE
    - when distributing Kolin app, need to distribute Kotline Runtime Library + JRE

    * can write code outside of classes in Kotlin
        - compiler will auto create class

========================================================================================================================
Kotlin vs Java
========================================================================================================================

    - kotlin don't need ';'
    - kotlin use plenty of wrappers (eg: println())
    - kotlin have hard (cannot use keyword as name at all) & soft (can use but not recommended) keywords
    - can use arr[] slicing in kotlin but not in Java
    - kotlin has its own 'String' class implementation (not entirely similar to java.lang.String)
    - kotlin does not distinguish between checked & unchecked exception (all exceptions unchecked)
    - kotlin does not have ternary operator
    - for loop syntax does not exist in kotlin
    - kotlin does not have static keyword (syntactically, but within compiler, it still exist)
    - kotlin does not require new keyword for new instance